<!-- 工程的根标签 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如 com.mycompany.app 生成的相对路径为：/com/mycompany/app -->
    <!-- <groupId>com.company_name.project-group</groupId> -->
    <groupId>com.longg246.lgblearn</groupId>

    <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 -->
    <!-- <artifactId>project</artifactId> -->
    <artifactId>lgblearn</artifactId>

    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
    <version>0.0.1</version>

    <!--项目的名称, Maven产生的文档用 -->
    <name>lgblearn-maven</name>

    <!--项目主页的URL, Maven产生的文档用 -->
    <url>https://github.com/longgb246/lgblearn</url>

    <!--构建项目需要的信息 -->
    <build>
        <!--产生的构件的文件名，默认值是${artifactId}-${version}。 -->
        <!-- <finalName></finalName> -->

        <!--使用的插件列表 。 -->
        <plugins>

            <!-- plugin元素包含描述插件所需要的信息。 -->
            <plugin>

                <!-- 插件在仓库里的group ID -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>

                <!-- 作为DOM对象的配置 -->
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>

                <!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
                <executions>

                    <!-- execution元素包含了插件执行需要的信息 -->
                    <execution>

                        <!-- SCM里项目开发者的唯一标识符 -->
                        <id>copy-resources</id>

                        <!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 -->
                        <phase>compile</phase>

                        <!-- 配置的执行目标 -->
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>

                        <configuration>

                            <overwrite>true</overwrite>

                            <!-- 输出文件位置 -->
                            <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例
                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>

                            <!-- 待处理的文件位置 -->
                            <resources>

                                <!-- 源代码 -->
                                <resource>
                                    <directory>src</directory>
                                    <targetPath>src</targetPath>
                                    <includes>
                                        <include>**/*.py</include>
                                        <include>**/*.yaml</include>
                                    </includes>
                                    <excludes>
                                        <exclude>**/*.pyc</exclude>
                                    </excludes>
                                    <filtering>true</filtering>
                                </resource>

                                <!-- 配置文件 -->
                                <resource>
                                    <directory>${config.dir}</directory>
                                    <targetPath>src/config</targetPath>
                                    <includes>
                                        <include>**/*.py</include>
                                        <include>**/*.yaml</include>
                                    </includes>
                                    <excludes>
                                        <exclude>**/*.pyc</exclude>
                                    </excludes>
                                    <filtering>false</filtering>
                                </resource>

                                <!-- 构建脚本 -->
                                <resource>
                                    <directory>build</directory>
                                    <targetPath>build</targetPath>
                                    <includes>
                                        <include>make_zip.py</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>

                                <!-- 运行脚本 -->
                                <resource>
                                    <directory>${script.dir}</directory>
                                    <targetPath>src/script</targetPath>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
